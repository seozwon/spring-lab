
일반적인 웹 애플리케이션 개층 구조
: 컨트롤러 -> 서비스 -> 레포지토리 -> 디비
     ㅣ       ㅣ        ㅣ
       [     도메인    ]

- 컨트롤러 : 웹 MVC의 컨트롤러 역할 - API 만들거나 할 때 컨트롤러 역할
- 서비스 : 핵심 비즈니스 로직 구현 - 회원은 중복가입이 안된다거나 하는 로직
- 레포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
- 도메인 : 비즈니스 도메인 객체 - 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리

클래스 의존관계
- 회원 비즈니스 로직 : 회원 서비스 (MemberService)
- 회원 리포지토리 : MemberRepository (interface) - 메모리 기반의 가벼운 데이터 저장소 사용(넣었다 뺐다 할 수 있는 단순한 구현체)
=> 디비가 아직 선정되지 않았다는 가상 시나리오 : 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계


